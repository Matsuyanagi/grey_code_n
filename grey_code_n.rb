#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#-----------------------------------------------------------------------------
#	N進数 K桁 のグレイコード
#	
#	
#	2017-09-20
#-----------------------------------------------------------------------------
require 'pp'

Encoding.default_external="utf-8"
=begin
		0 1 2 3 4 
		0 0 0 0 0 
		
		「0 1 2 3 4 」の連番でなくてもよくて、5つの順列であればなんでもいい「0 2 4 1 3」とかでも
		
		0 1 2 3 4 
			↓
			1桁目は「0 1 2 3 4」「4 0 1 2 3」「3 4 0 1 2」「2 3 4 0 1」「1 2 3 4 0」
			上の桁に 「0 1 2 3 4」をつける
			↓
		0 1 2 3 4  4 0 1 2 3  3 4 0 1 2  2 3 4 0 1  1 2 3 4 0
		0 0 0 0 0  1 1 1 1 1  2 2 2 2 2  3 3 3 3 3  4 4 4 4 4
			↓
			2桁目が 「0 1 2 3 4」「4 0 1 2 3」「3 4 0 1 2」「2 3 4 0 1」「1 2 3 4 0」となるように並べ替えて、
			上の桁に 「0 1 2 3 4」をつける
			↓
		0 1 2 3 4  4 0 1 2 3  3 4 0 1 2  2 3 4 0 1  1 2 3 4 0	0 1 2 3 4  4 0 1 2 3  3 4 0 1 2  2 3 4 0 1  1 2 3 4 0	0 1 2 3 4  4 0 1 2 3  3 4 0 1 2  2 3 4 0 1  1 2 3 4 0	0 1 2 3 4  4 0 1 2 3  3 4 0 1 2  2 3 4 0 1  1 2 3 4 0	0 1 2 3 4  4 0 1 2 3  3 4 0 1 2  2 3 4 0 1  1 2 3 4 0
		0 0 0 0 0  1 1 1 1 1  2 2 2 2 2  3 3 3 3 3  4 4 4 4 4	4 4 4 4 4  0 0 0 0 0  1 1 1 1 1  2 2 2 2 2  3 3 3 3 3	3 3 3 3 3  4 4 4 4 4  0 0 0 0 0  1 1 1 1 1  2 2 2 2 2	2 2 2 2 2  3 3 3 3 3  4 4 4 4 4  0 0 0 0 0  1 1 1 1 1	1 1 1 1 1  2 2 2 2 2  3 3 3 3 3  4 4 4 4 4  0 0 0 0 0
		0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 0 0	1 1 1 1 1  1 1 1 1 1  1 1 1 1 1  1 1 1 1 1  1 1 1 1 1	2 2 2 2 2  2 2 2 2 2  2 2 2 2 2  2 2 2 2 2  2 2 2 2 2	3 3 3 3 3  3 3 3 3 3  3 3 3 3 3  3 3 3 3 3  3 3 3 3 3	4 4 4 4 4  4 4 4 4 4  4 4 4 4 4  4 4 4 4 4  4 4 4 4 4

=end

#-----------------------------------------------------------------------------
#	
#-----------------------------------------------------------------------------
settings = {
	
}

#-----------------------------------------------------------------------------
# 配列を [ 3 ][ 2 ][ 1 ][ 0 ] のように位取りをした数値に見立てて文字列にする
#	
#	[ 1, 0, 2, 3 ] #=> "3201"
#	
#-----------------------------------------------------------------------------
class Array
	def to_keta_str( n = 10 )
#		pp self
#		str = ""
#		self.reverse.each do |k|
#			str += k.to_s( n )
#		end
#		str
		self.reverse.map{ |a| a.to_s(n) }.join
	end
end



def main( settings )
	
	# 進数
	n_decimal = 5
	# 桁数
	keta_max = 4
	
	# 数字配列
	#	デフォルトで [ 0, 1, 2, 3, ... ] だが、どんな順番でもいい
	n_decimal_number_array = [ *( 0 ... n_decimal ) ]
	
	# shuffle してもいい 
	# n_decimal_number_array.shuffle!
	# pp n_decimal_number_array
	
	
	# すべての数 : 0 ... (N進数)^(桁数)
	( 0 ... n_decimal ** keta_max ).each do |current_number|
		
		# 各桁の数値を保持する。 [ 0 ] が最下位桁
		each_keta = Array.new( keta_max )
	
		keta_max.times do |keta|	# keta : 0 ... 桁数
			
			# 桁毎に 現在の数値を N**keta で位取りをシフトする : "1234" → "123"
			c = current_number / ( n_decimal ** keta )
			
			# index = c ( % n_decimal )
			# c で順番に [ 0, 1, 2, 3,... ] と取りたいが
			
			# -( c / n_decimal ) 
			# n_decimal ごとに配列のスタートをずらす必要がある
			#                        「0 1 2 3 4」→「4 0 1 2 3」→「3 4 0 1 2」→「2 3 4 0 1」→「1 2 3 4 0」
			#    インデックスの先頭が  0 →(-1して)→ 4 →(-1して)→ 3 →(-1して)→ 2 →(-1して)→ 1 とずれていく
			index = c - ( c / n_decimal ) 
			
			# 各桁を求める
			each_keta[ keta ] = n_decimal_number_array[ index % n_decimal ]
			
		end
		
		# 表示用の10進数の桁数
		decimal_keta_num = ( Math.log( n_decimal ** keta_max ) / Math.log( 10 ) ).ceil
		
		# 各桁の配列を文字列化する [0] が最下位なので文字列としては反転する
		puts %Q!#{sprintf( "%#{decimal_keta_num}d", current_number )} : #{current_number.to_s(n_decimal).rjust(keta_max) } : #{each_keta.to_keta_str(n_decimal)}!
		
	end
	
	
	
	
end

main( settings )
